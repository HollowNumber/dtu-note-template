name: Create Package Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (leave empty to read from typst.toml)"
        required: false

permissions:
  contents: write
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Using tag version: $VERSION"
          else
            VERSION=$(grep 'version.*=' typst.toml | cut -d'"' -f2)
            echo "Using typst.toml version: $VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: taiki-e/create-gh-release-action@v1
        with:
          changelog: CHANGELOG.md
          title: DTU Template v${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    name: Build and Package Template
    needs: create-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Typst
        uses: typst-community/setup-typst@v3
        with:
          typst-version: latest

      - name: Set version
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create package structure
        run: |
          echo "üì¶ Creating package structure for version $VERSION..."

          # Create the package directory structure
          mkdir -p "dtu-template/$VERSION/src"

          # Copy src directory contents to versioned src directory
          cp -r src/* "dtu-template/$VERSION/src/"

          # Copy typst.toml to the version directory
          cp typst.toml "dtu-template/$VERSION/"

          # Copy noter config if it exists
          if [ -f ".noter.config.toml" ]; then
            cp .noter.config.toml "dtu-template/$VERSION/"
          fi

          # Update version in the typst.toml if manual version provided
          if [ -n "${{ github.event.inputs.version }}" ]; then
            sed -i "s/version = \".*\"/version = \"$VERSION\"/" "dtu-template/$VERSION/typst.toml"
          fi

          echo "üìÑ Package structure created:"
          find dtu-template -type f | sort

      - name: Validate package
        run: |
          echo "üîç Final validation before publishing..."

          VERSION=${{ env.VERSION }}

          # Verify essential files are present
          required_files=(
            "dtu-template/$VERSION/typst.toml"
            "dtu-template/$VERSION/src/lib.typ"
            "dtu-template/$VERSION/src/assets/dtu-logo-cmyk.png"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Error: Required file $file is missing"
              exit 1
            fi
          done

          # Verify version directory and src subdirectory exist
          if [ ! -d "dtu-template/$VERSION" ]; then
            echo "‚ùå Error: Version directory is missing"
            exit 1
          fi

          if [ ! -d "dtu-template/$VERSION/src" ]; then
            echo "‚ùå Error: src subdirectory is missing"
            exit 1
          fi

          # Count files to ensure structure was copied
          file_count=$(find "dtu-template/$VERSION/src" -type f | wc -l)
          if [ "$file_count" -lt 10 ]; then
            echo "‚ùå Error: Too few files copied ($file_count found, expected at least 10)"
            exit 1
          fi

          echo "‚úÖ Package validation passed! ($file_count files found in src/)"

          # Test compilation one more time
          mkdir -p final-test
          cat > final-test/test.typ << EOF
          #import "../dtu-template/$VERSION/src/lib.typ": dtu-note

          #show: dtu-note.with(
            course: "02101",
            title: "Final Test",
            author: "CI Test"
          )

          = Test
          This is a final compilation test before publishing.
          EOF

          cd final-test
          typst compile --root .. test.typ test.pdf

          if [ $? -eq 0 ]; then
            echo "‚úÖ Final compilation test passed"
          else
            echo "‚ùå Final compilation test failed"
            exit 1
          fi

      - name: Create release archive
        run: |
          VERSION=${{ env.VERSION }}
          echo "üì¶ Creating release archive..."

          # Create tarball for release
          tar -czf "dtu-template-$VERSION.tar.gz" dtu-template/

          echo "‚úÖ Archive created: dtu-template-$VERSION.tar.gz"

          # Display archive contents
          echo "üìÑ Archive contents:"
          tar -tzf "dtu-template-$VERSION.tar.gz" | head -20

      - name: Upload release asset
        run: |
          echo "üöÄ Uploading release asset..."
          gh release upload v${{ env.VERSION }} "dtu-template-${{ env.VERSION }}.tar.gz" --clobber
          echo "‚úÖ Release asset uploaded successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: dtu-template-package-v${{ env.VERSION }}
          path: |
            dtu-template/
            dtu-template-${{ env.VERSION }}.tar.gz
          retention-days: 30

      - name: Create package summary
        run: |
          VERSION=${{ env.VERSION }}
          echo "üéâ Package created successfully!"
          echo ""
          echo "üìã Release Details:"
          echo "Repository: ${{ github.repository }}"name: Create Package Release

          on:
            push:
              tags:
                - 'v*'
            workflow_dispatch:
              inputs:
                version:
                  description: "Version to publish (leave empty to read from typst.toml)"
                  required: false

          permissions:
            contents: write
            actions: read

          jobs:
            create-release:
              runs-on: ubuntu-latest
              name: Create GitHub Release
              outputs:
                version: ${{ steps.version.outputs.version }}

              steps:
                - name: Checkout repository
                  uses: actions/checkout@v4

                - name: Extract version
                  id: version
                  run: |
                    if [ -n "${{ github.event.inputs.version }}" ]; then
                      VERSION="${{ github.event.inputs.version }}"
                      echo "Using manual version: $VERSION"
                    elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      VERSION=${GITHUB_REF#refs/tags/v}
                      echo "Using tag version: $VERSION"
                    else
                      VERSION=$(grep 'version.*=' typst.toml | cut -d'"' -f2)
                      echo "Using typst.toml version: $VERSION"
                    fi
                    echo "VERSION=$VERSION" >> $GITHUB_ENV
                    echo "version=$VERSION" >> $GITHUB_OUTPUT

                - name: Create GitHub Release
                  uses: taiki-e/create-gh-release-action@v1
                  with:
                    changelog: CHANGELOG.md
                    title: DTU Template v${{ env.VERSION }}
                    draft: false
                    prerelease: false
                  env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            publish:
              runs-on: ubuntu-latest
              name: Build and Package Template
              needs: create-release

              steps:
                - name: Checkout repository
                  uses: actions/checkout@v4

                - name: Setup Typst
                  uses: typst-community/setup-typst@v3
                  with:
                    typst-version: latest

                - name: Set version
                  run: |
                    VERSION=${{ needs.create-release.outputs.version }}
                    echo "VERSION=$VERSION" >> $GITHUB_ENV

                - name: Create package structure
                  run: |
                    echo "üì¶ Creating package structure for version $VERSION..."

                    # Create the package directory structure
                    mkdir -p "dtu-template/$VERSION/src"

                    # Copy src directory contents to versioned src directory
                    cp -r src/* "dtu-template/$VERSION/src/"

                    # Copy typst.toml to the version directory
                    cp typst.toml "dtu-template/$VERSION/"

                    # Copy noter config if it exists
                    if [ -f ".noter.config.toml" ]; then
                      cp .noter.config.toml "dtu-template/$VERSION/"
                    fi

                    # Update version in the typst.toml if manual version provided
                    if [ -n "${{ github.event.inputs.version }}" ]; then
                      sed -i "s/version = \".*\"/version = \"$VERSION\"/" "dtu-template/$VERSION/typst.toml"
                    fi

                    echo "üìÑ Package structure created:"
                    find dtu-template -type f | sort

                - name: Validate package
                  run: |
                    echo "üîç Final validation before publishing..."

                    VERSION=${{ env.VERSION }}

                    # Verify essential files are present
                    required_files=(
                      "dtu-template/$VERSION/typst.toml"
                      "dtu-template/$VERSION/src/lib.typ"
                      "dtu-template/$VERSION/src/assets/dtu-logo-cmyk.png"
                    )

                    for file in "${required_files[@]}"; do
                      if [ ! -f "$file" ]; then
                        echo "‚ùå Error: Required file $file is missing"
                        exit 1
                      fi
                    done

                    # Verify version directory and src subdirectory exist
                    if [ ! -d "dtu-template/$VERSION" ]; then
                      echo "‚ùå Error: Version directory is missing"
                      exit 1
                    fi

                    if [ ! -d "dtu-template/$VERSION/src" ]; then
                      echo "‚ùå Error: src subdirectory is missing"
                      exit 1
                    fi

                    # Count files to ensure structure was copied
                    file_count=$(find "dtu-template/$VERSION/src" -type f | wc -l)
                    if [ "$file_count" -lt 10 ]; then
                      echo "‚ùå Error: Too few files copied ($file_count found, expected at least 10)"
                      exit 1
                    fi

                    echo "‚úÖ Package validation passed! ($file_count files found in src/)"

                    # Test compilation one more time
                    mkdir -p final-test
                    cat > final-test/test.typ << EOF
                    #import "../dtu-template/$VERSION/src/lib.typ": dtu-note

                    #show: dtu-note.with(
                      course: "02101",
                      title: "Final Test",
                      author: "CI Test"
                    )

                    = Test
                    This is a final compilation test before publishing.
                    EOF

                    cd final-test
                    typst compile --root .. test.typ test.pdf

                    if [ $? -eq 0 ]; then
                      echo "‚úÖ Final compilation test passed"
                    else
                      echo "‚ùå Final compilation test failed"
                      exit 1
                    fi

                - name: Create release archive
                  run: |
                    VERSION=${{ env.VERSION }}
                    echo "üì¶ Creating release archive..."

                    # Create tarball for release
                    tar -czf "dtu-template-$VERSION.tar.gz" dtu-template/

                    echo "‚úÖ Archive created: dtu-template-$VERSION.tar.gz"

                    # Display archive contents
                    echo "üìÑ Archive contents:"
                    tar -tzf "dtu-template-$VERSION.tar.gz" | head -20

                - name: Upload release asset
                  run: |
                    echo "üöÄ Uploading release asset..."
                    gh release upload v${{ env.VERSION }} "dtu-template-${{ env.VERSION }}.tar.gz" --clobber
                    echo "‚úÖ Release asset uploaded successfully!"
                  env:
                    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

                - name: Upload package artifact
                  uses: actions/upload-artifact@v4
                  with:
                    name: dtu-template-package-v${{ env.VERSION }}
                    path: |
                      dtu-template/
                      dtu-template-${{ env.VERSION }}.tar.gz
                    retention-days: 30

          echo "Version: $VERSION"
          echo "Tag: v$VERSION"
          echo ""
          echo "üì¶ Package Structure:"
          echo "‚úì dtu-template/$VERSION/typst.toml (version-specific package config)"
          echo "‚úì dtu-template/$VERSION/src/ (all source files)"
          echo "‚úì dtu-template/$VERSION/src/lib.typ (main library)"
          echo "‚úì dtu-template/$VERSION/src/components/ (academic & visual components)"
          echo "‚úì dtu-template/$VERSION/src/styles/ (spacing & typography utilities)"
          echo "‚úì dtu-template/$VERSION/src/helpers/ (layout & content helpers)"
          echo "‚úì dtu-template/$VERSION/src/layouts/ (note & assignment templates)"
          echo "‚úì dtu-template/$VERSION/src/assets/ (static resources)"
          echo "‚úì dtu-template/$VERSION/src/VERSION.typ (version metadata)"
          echo ""
          echo "üèóÔ∏è Modular Architecture:"
          echo "  ‚Ä¢ Enhanced component organization"
          echo "  ‚Ä¢ Better maintainability and extensibility"
          echo "  ‚Ä¢ Version-specific typst.toml configuration"
          echo ""
          echo "‚úÖ Package ready for distribution!"
          echo ""
          echo "üîó Release available at: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
